/*
 * grunt-json-to-html
 * https://github.com/frozzare/grunt-json-to-html
 *
 * Copyright (c) 2013 Fredrik Forsmo
 * Licensed under the MIT license.
 *
 * Modifed by Kyle Hornberg
 */

'use strict';

module.exports = function(grunt) {

  // var json_to_html = require('json-to-html');

  grunt.registerMultiTask('json_to_html', 'Grunt plugin for json-to-html', function() {

    // Default options.
    var options = this.options({
      pre: false
    });

    function json_to_html(data) {
        var abstractItems = [],
            abstractKeys = Object.keys(data);

            abstractKeys.forEach(function(key) {

                if (data[key] !== 'undefined' && key.indexOf('Chapter')) {
                    switch (key) {
                        case 'id':
                            abstractItems.push('<div id="abstract-' + data.id + '" class="ui piled segment hide">');
                            break;
                        case 'Title':
                            abstractItems.push('<div class="item"><div class="ui tiny green read button right floated">Read</div><h2>' + data.Title + '</h2><div class="ui list">');
                            break;
                        case 'CCEL Subjects':
                            abstractItems.push('<span class="item"><i class="right triangle icon"></i> ' + key + ': ' + data[key].split(';').join(' ') + '</span>');
                            break;
                        case 'LC Subjects':
                            abstractItems.push('<span class="item"><i class="right triangle icon"></i> ' + key + ': ' + data[key].split(',').join(' ') + '</span>');
                            break;
                        case 'Abstract':
                            abstractItems.push('<div class="ui section divider"></div> </div> <p>' + data.Abstract + '</p> </div> </div>');
                            break;
                        default:
                            abstractItems.push('<span class="item"><i class="right triangle icon"></i> ' + key + ': ' + data[key] + '</span>');
                    }
                }
            });

        return {
        'link' : '<a class="item" data-book="' + data.id + '" href="#"><div class="header">' + data.Title + '</div><span class="author">by ' + data['Creator(s)'] + '</span></a>',
        'abstract' : abstractItems.join('')
        };
    }

    // Iterate over all specified file groups.
    this.files.forEach(function(f) {
      // Concat specified files.
      var src = f.src.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).

        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      }).map(function(filepath) {
        // Read file source.
        return grunt.file.readJSON(filepath);
      }).map(function (data) {
        return json_to_html(data);
      });

      var links = '', abstracts = '';
      src.forEach(function(a) {
        links += a['link'] + '\n';
        abstracts += a['abstract'] + '\n';
      })

      if (typeof options.output === 'function') {
        // Call custom output function with the src.
        options.output.call(grunt, src);
      } else {
        // Write the destination file.
        // grunt.log.writeln(src);
        grunt.file.write(f.dest + options['links'], links);
        grunt.file.write(f.dest + options['abstracts'], abstracts);

        // Print a success message.
        grunt.log.writeln('File "' + f.dest + '" created.');
      }
    });
  });



};
